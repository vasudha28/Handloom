import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { ShoppingBag, CreditCard, CheckCircle, AlertCircle } from 'lucide-react';
import { useCart } from '@/contexts/CartContext';
import { PaymentService } from '@/services/paymentService';
import { PaymentDetails, PaymentStatus } from '@/config/razorpay';
import CustomerInfoForm, { CustomerInfo } from '@/components/checkout/CustomerInfoForm';
import { toast } from 'sonner';

const Checkout = () => {
  const navigate = useNavigate();
  const { cartItems, getCartTotal, clearCart } = useCart();
  const [isProcessingPayment, setIsProcessingPayment] = useState(false);
  const [customerInfo, setCustomerInfo] = useState<CustomerInfo | null>(null);
  const [currentStep, setCurrentStep] = useState<'info' | 'payment' | 'success'>('info');

  const paymentService = PaymentService.getInstance();

  // Calculate totals
  const subtotal = getCartTotal();
  const shipping = subtotal > 2000 ? 0 : 150;
  const tax = Math.round(subtotal * 0.18); // 18% GST
  const total = subtotal + shipping + tax;

  // Redirect if cart is empty
  if (cartItems.length === 0 && currentStep !== 'success') {
    return (
      <div className="min-h-screen bg-gradient-subtle flex items-center justify-center">
        <div className="text-center">
          <ShoppingBag className="h-24 w-24 text-muted-foreground mx-auto mb-4" />
          <h2 className="text-2xl font-bold mb-2">Your cart is empty</h2>
          <p className="text-muted-foreground mb-6">
            Add items to your cart before proceeding to checkout
          </p>
          <Button onClick={() => navigate('/products')}>
            Continue Shopping
          </Button>
        </div>
      </div>
    );
  }

  const handleCustomerInfoSubmit = (info: CustomerInfo) => {
    setCustomerInfo(info);
    setCurrentStep('payment');
    initiatePayment(info);
  };

  const initiatePayment = async (info: CustomerInfo) => {
    setIsProcessingPayment(true);

    const paymentDetails: PaymentDetails = {
      orderId: '', // Will be generated by payment service
      amount: total,
      currency: 'INR',
      customerName: info.name,
      customerEmail: info.email,
      customerPhone: info.phone,
      customerAddress: info.address
    };

    await paymentService.processPayment(
      paymentDetails,
      handlePaymentSuccess,
      handlePaymentFailure
    );

    setIsProcessingPayment(false);
  };

  const handlePaymentSuccess = async (response: any) => {
    try {
      // In a real app, verify payment on backend
      const isVerified = await paymentService.verifyPayment(
        response.razorpay_payment_id,
        response.orderId,
        response.razorpay_signature
      );

      if (isVerified) {
        // Clear cart and show success
        clearCart();
        setCurrentStep('success');
        toast.success('Payment successful! Your order has been placed.');
        
        // Store order details in localStorage for order confirmation
        localStorage.setItem('lastOrder', JSON.stringify({
          orderId: response.orderId,
          paymentId: response.razorpay_payment_id,
          amount: total,
          items: cartItems,
          customerInfo,
          timestamp: new Date().toISOString()
        }));
      } else {
        handlePaymentFailure({ error: 'Payment verification failed', status: PaymentStatus.FAILED });
      }
    } catch (error) {
      console.error('Payment verification error:', error);
      handlePaymentFailure({ error: 'Payment verification failed', status: PaymentStatus.FAILED });
    }
  };

  const handlePaymentFailure = (error: any) => {
    console.error('Payment failed:', error);
    setCurrentStep('info');
    
    if (error.status === PaymentStatus.CANCELLED) {
      toast.error('Payment was cancelled. Please try again.');
    } else {
      toast.error('Payment failed. Please try again.');
    }
  };

  // Success page
  if (currentStep === 'success') {
    return (
      <div className="min-h-screen bg-gradient-subtle flex items-center justify-center">
        <Card className="max-w-md mx-auto">
          <CardContent className="text-center pt-6">
            <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
            <h2 className="text-2xl font-bold mb-2">Payment Successful!</h2>
            <p className="text-muted-foreground mb-6">
              Thank you for your purchase. Your order has been confirmed.
            </p>
            <div className="space-y-2 mb-6">
              <Button onClick={() => navigate('/')} className="w-full">
                Continue Shopping
              </Button>
              <Button variant="outline" onClick={() => navigate('/track-order')} className="w-full">
                Track Order
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-subtle">
      <div className="container mx-auto px-4 py-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-primary mb-4">Checkout</h1>
          <p className="text-muted-foreground">
            Complete your purchase securely
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Customer Information */}
          <div className="lg:col-span-2">
            {currentStep === 'info' && (
              <CustomerInfoForm 
                onSubmit={handleCustomerInfoSubmit}
                isLoading={isProcessingPayment}
              />
            )}
            
            {currentStep === 'payment' && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <CreditCard className="w-5 h-5" />
                    Processing Payment
                  </CardTitle>
                </CardHeader>
                <CardContent className="text-center py-8">
                  <div className="animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4"></div>
                  <p className="text-muted-foreground">
                    Please complete the payment in the Razorpay popup window
                  </p>
                  <Button 
                    variant="outline" 
                    onClick={() => setCurrentStep('info')}
                    className="mt-4"
                  >
                    Back to Customer Info
                  </Button>
                </CardContent>
              </Card>
            )}
          </div>

          {/* Order Summary */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Order Summary</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Cart Items */}
                <div className="space-y-3">
                  {cartItems.map((item) => (
                    <div key={item.id} className="flex gap-3">
                      <img
                        src={item.image}
                        alt={item.name}
                        className="w-12 h-12 object-cover rounded"
                      />
                      <div className="flex-1">
                        <h4 className="font-medium text-sm">{item.name}</h4>
                        <div className="flex justify-between items-center">
                          <span className="text-sm text-muted-foreground">
                            Qty: {item.quantity}
                          </span>
                          <span className="font-medium">
                            â‚¹{(item.price * item.quantity).toLocaleString()}
                          </span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                <Separator />

                {/* Totals */}
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span>Subtotal ({cartItems.reduce((sum, item) => sum + item.quantity, 0)} items)</span>
                    <span>â‚¹{subtotal.toLocaleString()}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Shipping</span>
                    <span className={shipping === 0 ? "text-green-600" : ""}>
                      {shipping === 0 ? "FREE" : `â‚¹${shipping}`}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span>Tax (GST 18%)</span>
                    <span>â‚¹{tax.toLocaleString()}</span>
                  </div>
                  <Separator />
                  <div className="flex justify-between font-bold text-lg">
                    <span>Total</span>
                    <span className="text-primary">â‚¹{total.toLocaleString()}</span>
                  </div>
                </div>

                {/* Security Badge */}
                <div className="text-center pt-4">
                  <Badge variant="secondary" className="text-xs">
                    ðŸ”’ Secure Payment by Razorpay
                  </Badge>
                </div>
              </CardContent>
            </Card>

            {/* Payment Methods */}
            <Card>
              <CardHeader>
                <CardTitle className="text-base">Accepted Payments</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 gap-2 text-xs text-center">
                  <Badge variant="outline">Credit Cards</Badge>
                  <Badge variant="outline">Debit Cards</Badge>
                  <Badge variant="outline">Net Banking</Badge>
                  <Badge variant="outline">UPI</Badge>
                  <Badge variant="outline">Wallets</Badge>
                  <Badge variant="outline">EMI</Badge>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Checkout;
